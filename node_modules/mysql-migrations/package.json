{
  "_from": "mysql-migrations",
  "_id": "mysql-migrations@1.0.6",
  "_inBundle": false,
  "_integrity": "sha1-7J4CESesOEYL7gUXj8k9SM6g0KQ=",
  "_location": "/mysql-migrations",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "mysql-migrations",
    "fetchSpec": "latest",
    "name": "mysql-migrations",
    "raw": "mysql-migrations",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/mysql-migrations/-/mysql-migrations-1.0.6.tgz",
  "_shasum": "ec9e021127ac38460bee05178fc93d48cea0d0a4",
  "_shrinkwrap": null,
  "_spec": "mysql-migrations",
  "_where": "/home/sheba/Desktop/CRM_PRACTISE",
  "author": {
    "name": "Kshitij Awadhiya"
  },
  "bugs": {
    "url": "https://github.com/kawadhiya21/mysql-migrations/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A tool to use with mysql package to maintain migrations",
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^3.2.0",
    "mysql": "^2.13.0"
  },
  "homepage": "https://github.com/kawadhiya21/mysql-migrations#readme",
  "keywords": [
    "management",
    "migrations",
    "mysql",
    "node",
    "table"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "mysql-migrations",
  "optionalDependencies": {},
  "readme": "# mysql-migrations\n\n## Table of contents\n - [Prerequisites](#prerequisites)\n - [Install](#install)\n - [Setup](#setup)\n - [Adding Migrations](#adding-migrations)\n - [Executing Migrations](#executing-migrations)\n\n## Prerequisites\nA node project with [mysql](https://github.com/mysqljs/mysql) used for database.\n\n## Install\nIt can be installed using npm.\n\n```\nnpm install mysql-migrations\n```\n\n## Setup\n1. Create a directory where you wish to maintain all your migrations. We call it `migrations`.\n2. Instantiate mysql-migrations by passing a mysql pool and the migrations directory path.\n\n```\n# migration.js\nvar mysql = require('mysql');\nvar migration = require('mysql-migration');\n\nvar connection = mysql.createPool({\n  connectionLimit : 10,\n  host     : 'localhost',\n  user     : 'root',\n  password : 'password',\n  database : 'your_database'\n});\n\nmigration.init(connection, __dirname + '/migrations');\n```\n\n## Adding Migrations\n\n### Initiate a migration\nRun `node migration.js add migration create_table_users`. Now open the migrations folder. Locate the newest file with greatest timestamp as it predecessor. The file will have the name which was specified in the command such as `12213545345_create_table_users.js`\n\n### Add migrations\nWrite the query in `up` key of the json created for the forward migration. As a part of good practice, also write the script to rollback the migration in `down` key. Ex.\n\n```\nmodule.exports = {\n    \"up\": \"CREATE TABLE users (user_id INT NOT NULL, UNIQUE KEY user_id (user_id), name TEXT )\",\n    \"down\": \"DROP TABLE users\"\n}\n```\n\n### Add seed\nRun `node migration.js add seed create_table_users` to add a seed.\n\n```\nmodule.exports = {\n    \"up\": \"UPDATE users SET name = 'John Snow' WHERE name = ''\",\n    \"down\": \"UPDATE users SET name = '' WHERE name = 'John Snow'\"\n}\n```\n\n### Initate and Add migration in single command\n\nRun `node migration.js add migration create_table_users \"CREATE TABLE mysql_migrations_347ertt3e (user_id INT NOT NULL, UNIQUE KEY user_id (user_id) )\"`. Locate the newest file with greatest timestamp as it predecessor and open it. Query will be automatically added as `up` key. However `down` key needs to be filled manually.\n\n### Custom migrations\nYou may initiate the migration file and add a function.\n\n```\nmodule.exports = {\n  'up' :  function (conn, cb) {\n    conn.query (\"UPDATE users set name = 'alen'\", function (err, res) {\n      cb();\n    });\n  },\n  'down' : \"\"\n}\n```\n\n## Executing Migrations\nThere are few ways to run migrations.\n\n1. Run `node migration.js up`. Runs all the pending `up` migrations.\n2. Run `node migration.js up 2`. Runs 2 pending `up` migrations from the last position.\n3. Run `node migration.js down`. Runs only 1 `down` migrations.\n4. Run `node migration.js refresh`. Runs all down migrations followed by all up.\n\n### Execute anonymous migrations\nAt times, few migrations need to run again or anonymously. There could be variety of reasons old migrations need to be executed or rollbacked. It can be done this way.\n\n**Up migration**\n```\nnode migration.js run 1500891087394_create_table_users.js up\n```\n\n**Down migration**\n```\nnode migration.js run 1500891087394_create_table_users.js down\n```\n\n> Since these are anonymous executions, no records are maintained for any executions.\n\n## Help and Support\nWill be more than happy to improve upon this version. This is an over night build and needs to be improved certainly. Will welcome everyone who wants to contribute.\n\n## Credits and other stuff\nIt is my first contribution to npm and I am sort of happy over it. I made this when I was really looking for a suitable tool with barebone settings allowing me to maintain database structure. I could not find a basic one and hence wrote my own and finally decided to publish. It took me around 2 hours to write the first version which barely works. But it still does my job.\n\n> Credits to [ramnique](https://github.com/ramnique/) (I worked with him at Stayzilla and he is a great mentor).\n\n> And of course to my parents.\n",
  "readmeFilename": "README.MD",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kawadhiya21/mysql-migrations.git"
  },
  "scripts": {
    "test": "node node_modules/.bin/mocha test/*"
  },
  "version": "1.0.6"
}
